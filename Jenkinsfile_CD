pipeline {
    agent any
    environment {
        PROJECT_ID = 'avengerdeploy'
        CLUSTER_NAME = 'cluster-avenger'
        LOCATION = 'europe-west1-b'
        CREDENTIALS_ID = 'avengerdeploy'
    }
    stages {
        
            stage('Cloning Git') {
      steps {
        git 'https://github.com/Mc-Cainss/avengers.git'
      }
            }
        
        stage('Deploy to avengerdeploy') {
            steps{
                echo param1
                dir("${env.WORKSPACE}/deployment/"){
                
                sh "sed -i -e 's/NUMEROVERSION/'+param1+'/g' frontend-deployment.yaml"
                sh "sed -i -e 's/NodePort/LoadBalancer/g' frontend-service.yaml"
                step([$class: 'KubernetesEngineBuilder', projectId: env.PROJECT_ID, clusterName: env.CLUSTER_NAME, location: env.LOCATION, manifestPattern: 'frontend-deployment.yaml', credentialsId: env.CREDENTIALS_ID, verifyDeployments: true])
                step([$class: 'KubernetesEngineBuilder', projectId: env.PROJECT_ID, clusterName: env.CLUSTER_NAME, location: env.LOCATION, manifestPattern: 'redis-master-deployment.yaml', credentialsId: env.CREDENTIALS_ID, verifyDeployments: true])
                step([$class: 'KubernetesEngineBuilder', projectId: env.PROJECT_ID, clusterName: env.CLUSTER_NAME, location: env.LOCATION, manifestPattern: 'frontend-service.yaml', credentialsId: env.CREDENTIALS_ID, verifyDeployments: true])
                step([$class: 'KubernetesEngineBuilder', projectId: env.PROJECT_ID, clusterName: env.CLUSTER_NAME, location: env.LOCATION, manifestPattern: 'redis-master-service.yaml', credentialsId: env.CREDENTIALS_ID, verifyDeployments: true])
               
                }
            }
    
        }
    }
}
